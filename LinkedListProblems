1. Add Two Numbers
You are given two linked lists representing two non-negative numbers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8


Idea:

We need to add the corresponding elements of each linked list, and also check to see if the carry goes over 10.


public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
  int carry = 0;
  
  ListNode newHead = new ListNode(0);
  ListNode p1 = l1, p2 = l2, p3 = newHead;
  
  while (p1 != null || p2 != null) {
    if (p1 != null) {
      carry += p1.val;
      p1 = p1.next;
    }
    if (p2 != null) {
      carry += p2.val;
      p2 = p2.next;
    }
    
    p3.next = new ListNode(carry % 10);
    p3 = p3.next;
    carry /= 10;
  }
  
  if (carry == 1) {
    p3.next = new ListNode(1);
  }
  return newHead.next;
}
  
  
  Explanation for the code:
    First we want to have a carry variable that will keep track of when we add up the numbers and it goes over 10.
    
    Then, we want to create a new ListNode object that we will be returning at the very end.
    We also want to set some listnode variables that point to our given arguments as well as the new listnode that we just created. 
    
    Now, we want to iterate through the linked lists while the current pointer is not pointing to null.
    
    If p1 isn't null, then we can increment our carry. If p2 isn't null, then we can increment our carry again. 
    
    Now, we want to create our next node at p3.next. We want to find the remainder since if there's anything left over we want to carry on to the next element. 
    
    We set p3 to be the next node (p3.next).
    
    We take our carry after dividing it by 10, since it's integer division, we bring it to the next place. 
    
    
    
Problem 3: Reverse a linked list:

  Iterative solution:
  
  public Node reverseList(Node node) {
    Node prev = null;
    Node current = node;
    Node next = null;
    
    while(current != null) {
      next = current.next;
      current.next = prev;
      prev = current;
      current = next;
  }
  node = prev;
  return node;
}
    
  
  
  
  
  
  Recursive solution:
  
  public Node reverseList(Node head) {
    if (head == null) {
      return null;
    }
    
    if (head.next == null) {
      return head;
    }
    
    //get the second element which holds on to the rest of the stuff in our linked list 
    Node second = head.next;
    
    //do this to unlink the head from the second element 
    head.next = null;
    
    //reverse everything from the second element on
    ListNode reverseRest = Reverse(second);
    
    second.next = head;
    
    return reverseRest;
  }
  
  Explanation for the code:
    First, if we have a list that is null, then we just want to return null.
    Then, if we have just a one element linked list, then we only want to return that list. 
    Then, this means we have multiple elements. We will want to first get the next of the head and then assign that to a node variable. This is so that we can recursively call with fewer and fewer elements in the linked list. 
    
    After we get the rest, then we want to remove the link from the head to the rest. so we do: head.next = null. This is to prevent cycles from occurring. 
    
    Now, we can recursively call and set it to a reverseRest variable that will be returned as null in the end. 
    
    After that, we want to set second.next -> head. This is because when we are done with the recursion, we will be assigning the nodes to the next node. 
    
    Return the variable at the very end (base case). 
  
  
